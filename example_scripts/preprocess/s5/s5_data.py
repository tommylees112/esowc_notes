from pathlib import Path
import xarray as xr
import pandas as pd
import numpy as np


era_dir = Path('/lustre/soge1/data/analysis/era5')
data_dir = Path('/lustre/soge1/data/incoming/seas5/')

# 1993-2019
temp_dir = data_dir / "1.0x1.0/6-hourly" / "2m_temperature" / "nc"
slp_dir = data_dir / "1.0x1.0/6-hourly" / "mean_sea_level_pressure" / "nc"
sst_dir = data_dir / "1.0x1.0/6-hourly" / "sea_surface_temperature" / "nc"
evap_dir = data_dir / "1.0x1.0/daily" / "evaporation" / "nc"

# ERA5
u_era_dir = era_dir / "0.28125x0.28125/hourly" / "u" / "nc"
v_era_dir = era_dir / "0.28125x0.28125/hourly" / "v" / "nc"
precip_era_dir = era_dir / "0.28125x0.28125/hourly" / "tp" / "nc"
temp_era_dir = era_dir / "0.28125x0.28125/hourly" / "t2m" / "nc"
slp_era_dir = era_dir / "0.28125x0.28125/hourly" / "mslp" / "nc"
pev_era_dir = era_dir / "0.28125x0.28125/hourly" / "pev" / "nc"


# ------------------------------------------------------------------------------
# Un-preprocess S5 data
# ------------------------------------------------------------------------------

FH = np.array([   21600000000000,    43200000000000,    64800000000000,
          86400000000000,   108000000000000,   129600000000000,
         151200000000000,   172800000000000,   194400000000000,
         216000000000000,   237600000000000,   259200000000000,
         280800000000000,   302400000000000,   324000000000000,
         345600000000000,   367200000000000,   388800000000000,
         410400000000000,   432000000000000,   453600000000000,
         475200000000000,   496800000000000,   518400000000000,
         540000000000000,   561600000000000,   583200000000000,
         604800000000000,   626400000000000,   648000000000000,
         669600000000000,   691200000000000,   712800000000000,
         734400000000000,   756000000000000,   777600000000000,
         799200000000000,   820800000000000,   842400000000000,
         864000000000000,   885600000000000,   907200000000000,
         928800000000000,   950400000000000,   972000000000000,
         993600000000000,  1015200000000000,  1036800000000000,
        1058400000000000,  1080000000000000,  1101600000000000,
        1123200000000000,  1144800000000000,  1166400000000000,
        1188000000000000,  1209600000000000,  1231200000000000,
        1252800000000000,  1274400000000000,  1296000000000000,
        1317600000000000,  1339200000000000,  1360800000000000,
        1382400000000000,  1404000000000000,  1425600000000000,
        1447200000000000,  1468800000000000,  1490400000000000,
        1512000000000000,  1533600000000000,  1555200000000000,
        1576800000000000,  1598400000000000,  1620000000000000,
        1641600000000000,  1663200000000000,  1684800000000000,
        1706400000000000,  1728000000000000,  1749600000000000,
        1771200000000000,  1792800000000000,  1814400000000000,
        1836000000000000,  1857600000000000,  1879200000000000,
        1900800000000000,  1922400000000000,  1944000000000000,
        1965600000000000,  1987200000000000,  2008800000000000,
        2030400000000000,  2052000000000000,  2073600000000000,
        2095200000000000,  2116800000000000,  2138400000000000,
        2160000000000000,  2181600000000000,  2203200000000000,
        2224800000000000,  2246400000000000,  2268000000000000,
        2289600000000000,  2311200000000000,  2332800000000000,
        2354400000000000,  2376000000000000,  2397600000000000,
        2419200000000000,  2440800000000000,  2462400000000000,
        2484000000000000,  2505600000000000,  2527200000000000,
        2548800000000000,  2570400000000000,  2592000000000000,
        2613600000000000,  2635200000000000,  2656800000000000,
        2678400000000000,  2700000000000000,  2721600000000000,
        2743200000000000,  2764800000000000,  2786400000000000,
        2808000000000000,  2829600000000000,  2851200000000000,
        2872800000000000,  2894400000000000,  2916000000000000,
        2937600000000000,  2959200000000000,  2980800000000000,
        3002400000000000,  3024000000000000,  3045600000000000,
        3067200000000000,  3088800000000000,  3110400000000000,
        3132000000000000,  3153600000000000,  3175200000000000,
        3196800000000000,  3218400000000000,  3240000000000000,
        3261600000000000,  3283200000000000,  3304800000000000,
        3326400000000000,  3348000000000000,  3369600000000000,
        3391200000000000,  3412800000000000,  3434400000000000,
        3456000000000000,  3477600000000000,  3499200000000000,
        3520800000000000,  3542400000000000,  3564000000000000,
        3585600000000000,  3607200000000000,  3628800000000000,
        3650400000000000,  3672000000000000,  3693600000000000,
        3715200000000000,  3736800000000000,  3758400000000000,
        3780000000000000,  3801600000000000,  3823200000000000,
        3844800000000000,  3866400000000000,  3888000000000000,
        3909600000000000,  3931200000000000,  3952800000000000,
        3974400000000000,  3996000000000000,  4017600000000000,
        4039200000000000,  4060800000000000,  4082400000000000,
        4104000000000000,  4125600000000000,  4147200000000000,
        4168800000000000,  4190400000000000,  4212000000000000,
        4233600000000000,  4255200000000000,  4276800000000000,
        4298400000000000,  4320000000000000,  4341600000000000,
        4363200000000000,  4384800000000000,  4406400000000000,
        4428000000000000,  4449600000000000,  4471200000000000,
        4492800000000000,  4514400000000000,  4536000000000000,
        4557600000000000,  4579200000000000,  4600800000000000,
        4622400000000000,  4644000000000000,  4665600000000000,
        4687200000000000,  4708800000000000,  4730400000000000,
        4752000000000000,  4773600000000000,  4795200000000000,
        4816800000000000,  4838400000000000,  4860000000000000,
        4881600000000000,  4903200000000000,  4924800000000000,
        4946400000000000,  4968000000000000,  4989600000000000,
        5011200000000000,  5032800000000000,  5054400000000000,
        5076000000000000,  5097600000000000,  5119200000000000,
        5140800000000000,  5162400000000000,  5184000000000000,
        5205600000000000,  5227200000000000,  5248800000000000,
        5270400000000000,  5292000000000000,  5313600000000000,
        5335200000000000,  5356800000000000,  5378400000000000,
        5400000000000000,  5421600000000000,  5443200000000000,
        5464800000000000,  5486400000000000,  5508000000000000,
        5529600000000000,  5551200000000000,  5572800000000000,
        5594400000000000,  5616000000000000,  5637600000000000,
        5659200000000000,  5680800000000000,  5702400000000000,
        5724000000000000,  5745600000000000,  5767200000000000,
        5788800000000000,  5810400000000000,  5832000000000000,
        5853600000000000,  5875200000000000,  5896800000000000,
        5918400000000000,  5940000000000000,  5961600000000000,
        5983200000000000,  6004800000000000,  6026400000000000,
        6048000000000000,  6069600000000000,  6091200000000000,
        6112800000000000,  6134400000000000,  6156000000000000,
        6177600000000000,  6199200000000000,  6220800000000000,
        6242400000000000,  6264000000000000,  6285600000000000,
        6307200000000000,  6328800000000000,  6350400000000000,
        6372000000000000,  6393600000000000,  6415200000000000,
        6436800000000000,  6458400000000000,  6480000000000000,
        6501600000000000,  6523200000000000,  6544800000000000,
        6566400000000000,  6588000000000000,  6609600000000000,
        6631200000000000,  6652800000000000,  6674400000000000,
        6696000000000000,  6717600000000000,  6739200000000000,
        6760800000000000,  6782400000000000,  6804000000000000,
        6825600000000000,  6847200000000000,  6868800000000000,
        6890400000000000,  6912000000000000,  6933600000000000,
        6955200000000000,  6976800000000000,  6998400000000000,
        7020000000000000,  7041600000000000,  7063200000000000,
        7084800000000000,  7106400000000000,  7128000000000000,
        7149600000000000,  7171200000000000,  7192800000000000,
        7214400000000000,  7236000000000000,  7257600000000000,
        7279200000000000,  7300800000000000,  7322400000000000,
        7344000000000000,  7365600000000000,  7387200000000000,
        7408800000000000,  7430400000000000,  7452000000000000,
        7473600000000000,  7495200000000000,  7516800000000000,
        7538400000000000,  7560000000000000,  7581600000000000,
        7603200000000000,  7624800000000000,  7646400000000000,
        7668000000000000,  7689600000000000,  7711200000000000,
        7732800000000000,  7754400000000000,  7776000000000000,
        7797600000000000,  7819200000000000,  7840800000000000,
        7862400000000000,  7884000000000000,  7905600000000000,
        7927200000000000,  7948800000000000,  7970400000000000,
        7992000000000000,  8013600000000000,  8035200000000000,
        8056800000000000,  8078400000000000,  8100000000000000,
        8121600000000000,  8143200000000000,  8164800000000000,
        8186400000000000,  8208000000000000,  8229600000000000,
        8251200000000000,  8272800000000000,  8294400000000000,
        8316000000000000,  8337600000000000,  8359200000000000,
        8380800000000000,  8402400000000000,  8424000000000000,
        8445600000000000,  8467200000000000,  8488800000000000,
        8510400000000000,  8532000000000000,  8553600000000000,
        8575200000000000,  8596800000000000,  8618400000000000,
        8640000000000000,  8661600000000000,  8683200000000000,
        8704800000000000,  8726400000000000,  8748000000000000,
        8769600000000000,  8791200000000000,  8812800000000000,
        8834400000000000,  8856000000000000,  8877600000000000,
        8899200000000000,  8920800000000000,  8942400000000000,
        8964000000000000,  8985600000000000,  9007200000000000,
        9028800000000000,  9050400000000000,  9072000000000000,
        9093600000000000,  9115200000000000,  9136800000000000,
        9158400000000000,  9180000000000000,  9201600000000000,
        9223200000000000,  9244800000000000,  9266400000000000,
        9288000000000000,  9309600000000000,  9331200000000000,
        9352800000000000,  9374400000000000,  9396000000000000,
        9417600000000000,  9439200000000000,  9460800000000000,
        9482400000000000,  9504000000000000,  9525600000000000,
        9547200000000000,  9568800000000000,  9590400000000000,
        9612000000000000,  9633600000000000,  9655200000000000,
        9676800000000000,  9698400000000000,  9720000000000000,
        9741600000000000,  9763200000000000,  9784800000000000,
        9806400000000000,  9828000000000000,  9849600000000000,
        9871200000000000,  9892800000000000,  9914400000000000,
        9936000000000000,  9957600000000000,  9979200000000000,
       10000800000000000, 10022400000000000, 10044000000000000,
       10065600000000000, 10087200000000000, 10108800000000000,
       10130400000000000, 10152000000000000, 10173600000000000,
       10195200000000000, 10216800000000000, 10238400000000000,
       10260000000000000, 10281600000000000, 10303200000000000,
       10324800000000000, 10346400000000000, 10368000000000000,
       10389600000000000, 10411200000000000, 10432800000000000,
       10454400000000000, 10476000000000000, 10497600000000000,
       10519200000000000, 10540800000000000, 10562400000000000,
       10584000000000000, 10605600000000000, 10627200000000000,
       10648800000000000, 10670400000000000, 10692000000000000,
       10713600000000000, 10735200000000000, 10756800000000000,
       10778400000000000, 10800000000000000, 10821600000000000,
       10843200000000000, 10864800000000000, 10886400000000000,
       10908000000000000, 10929600000000000, 10951200000000000,
       10972800000000000, 10994400000000000, 11016000000000000,
       11037600000000000, 11059200000000000, 11080800000000000,
       11102400000000000, 11124000000000000, 11145600000000000,
       11167200000000000, 11188800000000000, 11210400000000000,
       11232000000000000, 11253600000000000, 11275200000000000,
       11296800000000000, 11318400000000000, 11340000000000000,
       11361600000000000, 11383200000000000, 11404800000000000,
       11426400000000000, 11448000000000000, 11469600000000000,
       11491200000000000, 11512800000000000, 11534400000000000,
       11556000000000000, 11577600000000000, 11599200000000000,
       11620800000000000, 11642400000000000, 11664000000000000,
       11685600000000000, 11707200000000000, 11728800000000000,
       11750400000000000, 11772000000000000, 11793600000000000,
       11815200000000000, 11836800000000000, 11858400000000000,
       11880000000000000, 11901600000000000, 11923200000000000,
       11944800000000000, 11966400000000000, 11988000000000000,
       12009600000000000, 12031200000000000, 12052800000000000,
       12074400000000000, 12096000000000000, 12117600000000000,
       12139200000000000, 12160800000000000, 12182400000000000,
       12204000000000000, 12225600000000000, 12247200000000000,
       12268800000000000, 12290400000000000, 12312000000000000,
       12333600000000000, 12355200000000000, 12376800000000000,
       12398400000000000, 12420000000000000, 12441600000000000,
       12463200000000000, 12484800000000000, 12506400000000000,
       12528000000000000, 12549600000000000, 12571200000000000,
       12592800000000000, 12614400000000000, 12636000000000000,
       12657600000000000, 12679200000000000, 12700800000000000,
       12722400000000000, 12744000000000000, 12765600000000000,
       12787200000000000, 12808800000000000, 12830400000000000,
       12852000000000000, 12873600000000000, 12895200000000000,
       12916800000000000, 12938400000000000, 12960000000000000,
       12981600000000000, 13003200000000000, 13024800000000000,
       13046400000000000, 13068000000000000, 13089600000000000,
       13111200000000000, 13132800000000000, 13154400000000000,
       13176000000000000, 13197600000000000, 13219200000000000,
       13240800000000000, 13262400000000000, 13284000000000000,
       13305600000000000, 13327200000000000, 13348800000000000,
       13370400000000000, 13392000000000000, 13413600000000000,
       13435200000000000, 13456800000000000, 13478400000000000,
       13500000000000000, 13521600000000000, 13543200000000000,
       13564800000000000, 13586400000000000, 13608000000000000,
       13629600000000000, 13651200000000000, 13672800000000000,
       13694400000000000, 13716000000000000, 13737600000000000,
       13759200000000000, 13780800000000000, 13802400000000000,
       13824000000000000, 13845600000000000, 13867200000000000,
       13888800000000000, 13910400000000000, 13932000000000000,
       13953600000000000, 13975200000000000, 13996800000000000,
       14018400000000000, 14040000000000000, 14061600000000000,
       14083200000000000, 14104800000000000, 14126400000000000,
       14148000000000000, 14169600000000000, 14191200000000000,
       14212800000000000, 14234400000000000, 14256000000000000,
       14277600000000000, 14299200000000000, 14320800000000000,
       14342400000000000, 14364000000000000, 14385600000000000,
       14407200000000000, 14428800000000000, 14450400000000000,
       14472000000000000, 14493600000000000, 14515200000000000,
       14536800000000000, 14558400000000000, 14580000000000000,
       14601600000000000, 14623200000000000, 14644800000000000,
       14666400000000000, 14688000000000000, 14709600000000000,
       14731200000000000, 14752800000000000, 14774400000000000,
       14796000000000000, 14817600000000000, 14839200000000000,
       14860800000000000, 14882400000000000, 14904000000000000,
       14925600000000000, 14947200000000000, 14968800000000000,
       14990400000000000, 15012000000000000, 15033600000000000,
       15055200000000000, 15076800000000000, 15098400000000000,
       15120000000000000, 15141600000000000, 15163200000000000,
       15184800000000000, 15206400000000000, 15228000000000000,
       15249600000000000, 15271200000000000, 15292800000000000,
       15314400000000000, 15336000000000000, 15357600000000000,
       15379200000000000, 15400800000000000, 15422400000000000,
       15444000000000000, 15465600000000000, 15487200000000000,
       15508800000000000, 15530400000000000, 15552000000000000,
       15573600000000000, 15595200000000000, 15616800000000000,
       15638400000000000, 15660000000000000, 15681600000000000,
       15703200000000000, 15724800000000000, 15746400000000000,
       15768000000000000, 15789600000000000, 15811200000000000,
       15832800000000000, 15854400000000000, 15876000000000000,
       15897600000000000, 15919200000000000, 15940800000000000,
       15962400000000000, 15984000000000000, 16005600000000000,
       16027200000000000, 16048800000000000, 16070400000000000,
       16092000000000000, 16113600000000000, 16135200000000000,
       16156800000000000, 16178400000000000, 16200000000000000,
       16221600000000000, 16243200000000000, 16264800000000000,
       16286400000000000, 16308000000000000, 16329600000000000,
       16351200000000000, 16372800000000000, 16394400000000000,
       16416000000000000, 16437600000000000, 16459200000000000,
       16480800000000000, 16502400000000000, 16524000000000000,
       16545600000000000, 16567200000000000, 16588800000000000,
       16610400000000000, 16632000000000000, 16653600000000000,
       16675200000000000, 16696800000000000, 16718400000000000,
       16740000000000000, 16761600000000000, 16783200000000000,
       16804800000000000, 16826400000000000, 16848000000000000,
       16869600000000000, 16891200000000000, 16912800000000000,
       16934400000000000, 16956000000000000, 16977600000000000,
       16999200000000000, 17020800000000000, 17042400000000000,
       17064000000000000, 17085600000000000, 17107200000000000,
       17128800000000000, 17150400000000000, 17172000000000000,
       17193600000000000, 17215200000000000, 17236800000000000,
       17258400000000000, 17280000000000000, 17301600000000000,
       17323200000000000, 17344800000000000, 17366400000000000,
       17388000000000000, 17409600000000000, 17431200000000000,
       17452800000000000, 17474400000000000, 17496000000000000,
       17517600000000000, 17539200000000000, 17560800000000000,
       17582400000000000, 17604000000000000, 17625600000000000,
       17647200000000000, 17668800000000000, 17690400000000000,
       17712000000000000, 17733600000000000, 17755200000000000,
       17776800000000000, 17798400000000000, 17820000000000000,
       17841600000000000, 17863200000000000, 17884800000000000,
       17906400000000000, 17928000000000000, 17949600000000000,
       17971200000000000, 17992800000000000, 18014400000000000,
       18036000000000000, 18057600000000000, 18079200000000000,
       18100800000000000, 18122400000000000, 18144000000000000,
       18165600000000000, 18187200000000000, 18208800000000000,
       18230400000000000, 18252000000000000, 18273600000000000,
       18295200000000000, 18316800000000000, 18338400000000000,
       18360000000000000, 18381600000000000, 18403200000000000,
       18424800000000000, 18446400000000000, 18468000000000000,
       18489600000000000, 18511200000000000, 18532800000000000,
       18554400000000000, 18576000000000000], dtype='timedelta64[ns]')

def add_initialisation_date(ds: xr.Dataset, fname: Path) -> xr.Dataset:
    date_from_fname = pd.to_datetime(fname.stem.split('_')[-1], format='%Y%M')
    date_from_fname -= pd.to_timedelta('1 minute')
    return ds.expand_dims(
        {'initialisation_date': [date_from_fname]}
    )

def create_forecast_horizon(ds: xr.Dataset, infer=False) -> xr.Dataset:
    if infer:
    # inferring the forecast_horizon dynamically doesn't work
    # because calculates the
        fh = pd.to_timedelta(ds.time.values - ds.initialisation_date.values)
    else:
        assert len(ds.time.values) == 860, f"The static forecast_horizon method\
        only works when the forecast_horizon lengths are the same"
        fh = FH
    ds['time'] = fh
    return ds.rename({'time': 'forecast_horizon'})

def create_2D_time_coord(ds: xr.Dataset) -> xr.Dataset:
    time = ds.initialisation_date + ds.forecast_horizon
    return ds.assign_coords(valid_time=time)

def recreate_cds_s5(ds: xr.Dataset, fname: Path):
    """convert the preprocessed S5 data into format consistent with
    that downloaded from the CDS API for reproducibility.
    Required because of preprocessing done on OUCE server
    """
    # add `initialisation_date` from filename
    ds = add_initialisation_date(ds, fname)
    # convert `time` to `forecast_horizon`
    ds = create_forecast_horizon(ds)
    # create 2D `time` object (as in CDS API objects)
    ds = create_2D_time_coord(ds)
    return ds

def read_ouce_s5_data(path: Path) -> xr.Dataset:
    """ Read and process OUCE S5 data into format consistent with CDS API """
    ds = xr.open_dataset(path)
    return recreate_cds_s5(ds, fname=path1)

# two temperature forecasts
path1 = [f for f in temp_dir.iterdir() if f.suffix == '.nc'][0]
path2 = [f for f in temp_dir.iterdir() if f.suffix == '.nc'][1]

ds1 = read_ouce_s5_data(path1)
ds2 = read_ouce_s5_data(path2)

if False:
    # combining along initialisation_date dimension takes a long time
    out_ds = xr.concat([ds1, ds2], dim='initialisation_date')

# THEN re-create the time index
#  (this way it's consistent to how it would be downloaded through cds api)
stacked = ds1.stack(time=('initialisation_date', 'forecast_horizon'))

# ------------------------------------------------------------------------------
# PREPROCESSOR
# ------------------------------------------------------------------------------

def create_filename(netcdf_filepath: Path,
                    output_dir: Path,
                    variable: str) -> Path:
    filename = netcdf_filepath.stem + variable + '.nc'
    output_path = output_dir / filename
    return output_path

def _preprocess_single(netcdf_filepath: Path,
                       output_dir: Path,
                       variable: Optional[str] = None,
                       subset_str: Optional[str] = None,
                       regrid: Optional[str] = None) -> Path:
    print(f'Starting work on {netcdf_filepath.name}')

    # find how many variables
    coords = [c for c in ds.coords]
    vars = [v for v in ds.variables if v not in coords]

    # 1. chop out ROI
    if subset_str is not None:
        ds = self.chop_roi(ds, subset_str)

    # 2. regrid
    if regrid is not None:
        ds = self.regrid(ds, regrid)

    # 3. create the filepath and save to that location
    output_path = self.create_filename(
        netcdf_filepath,
        output_dir,
        subset_name=subset_str if subset_str is not None else None
    )
    assert output_path.name[-3:] == '.nc', \
    f'filepath name should be a .nc file. Currently: {netcdf_filepath.name}'

    # save the intermediary file (per timestep / variable)
    print(f'Saving to {output_path.as_posix()}')
    ds.to_netcdf(output_path)

    print(f'** Done for S5 {netcdf_filepath.name} **')
    return output_path

#
# ------------------------------------------------------------------------------
# Test creating a dummy
# ------------------------------------------------------------------------------
def make_fcast_dataset(date_start: str,
                       date_end: Optional[str]) -> xr.Dataset:

    if date_end is not None:
        initialisation_date = pd.date_range(start=date_start, end=date_end, freq='M')
    else:
        initialisation_date = pd.date_range(start=date_start, periods=1, freq='M')

    number = [i for i in range(0, 51)] # corresponds to ensemble number
    lat = np.linspace(-5.175003, -5.202, 36)
    lon = np.linspace(33.5, 42.25, 45)
    forecast_horizon = np.array(
        [ 2419200000000000,  2592000000000000,  2678400000000000,
          5097600000000000,  5270400000000000,  5356800000000000,
          7689600000000000,  7776000000000000,  7862400000000000,
          7948800000000000, 10368000000000000, 10454400000000000,
          10540800000000000, 10627200000000000, 12960000000000000,
          13046400000000000, 13219200000000000, 15638400000000000,
          15724800000000000, 15811200000000000, 15897600000000000,
          18316800000000000, 18489600000000000, 18576000000000000 ],
          dtype='timedelta64[ns]'
    )
    valid_time = initialisation_date[:, np.newaxis] + forecast_horizon
    variable = np.random.normal(
        0, 1, size=(len(number), len(initialisation_date), len(forecast_horizon), len(lat), len(lon))
    )

    ds = xr.Dataset(
        {'variable': (['number', 'initialisation_date', 'forecast_horizon', 'lat', 'lon'], precip)},
        coords={
            'lon': lon,
            'lat': lat,
            'initialisation_date': initialisation_date,
            'number': number,
            'forecast_horizon': forecast_horizon,
            'valid_time': (['initialisation_date', 'step'], valid_time)
        }
    )
    return ds

# ------------------------------------------------------------------------------
# Test OUCE data
# ------------------------------------------------------------------------------
# preprocessing from the filename
path = [f for f in temp_dir.iterdir() if f.suffix == '.nc'][0]
date_from_fname = pd.to_datetime(path.stem.split('_')[-1], format='%Y%M')
date_from_fname -= pd.to_timedelta('1 minute')

# RE insert the timestamp from the filename
ds = xr.open_dataset(path)
ds_new = ds.expand_dims(
    {'initialisation_date': [date_from_fname]}
)

# create forecast_horizon
fh = pd.to_timedelta(ds_new.time.values - ds_new.initialisation_date.values)
ds_new['time'] = fh
ds_new = ds_new.rename({'time': 'forecast_horizon'})

# create a new coord
time = ds_new.initialisation_date + ds_new.forecast_horizon
ds_new = ds_new.assign_coords(time=time)

# ------------------------------------------------------------------------------
# Test PREPROCESSING
# ------------------------------------------------------------------------------
from src.preprocess.base import BasePreProcessor

b = BasePreProcessor()
ds1_kenya = b.chop_roi(ds1, inverse_lat=True)
ds2_kenya = b.chop_roi(ds2, inverse_lat=True)

# concat across initialisation dates
ds_kenya = xr.concat([ds1_kenya, ds2_kenya], dim='initialisation_date')
stacked = ds_kenya.stack(time=('initialisation_date', 'forecast_horizon'))

# stack each individually
k1 = ds1_kenya.stack(time=('initialisation_date', 'forecast_horizon'))
k2 = ds2_kenya.stack(time=('initialisation_date', 'forecast_horizon'))

# test selectors
stacked.sel(forecast_horizon=np.timedelta64(28, 'D'))
stacked.sel(initialisation_date='1997-01-01')
stacked.swap_dims({'time': 'valid_time'}).sel(valid_time='1997-04')

# test regridding
ref_ds = b.load_reference_grid(path_to_grid=Path('data/interim/chirps_preprocessed.nc'))
ds1_kenya_regrid = b.regrid(ds1_kenya.rename({'latitude':'lat','longitude':'lon'}), ref_ds)

# test resampling time
b.resample_time()
